#include <stdio.h>
#include <stdlib.h>
#define MAX 100

typedef struct {

    string nome;
    int CPF;

}Cliente;

typedef struct {

    Cliente vetor[max];
    int numElem;

}Lista;

void criarLista( Lista* lista){

    Lista->numElem = 0;

}

void adicionarFinal(Lista* Lista, Cliente c1){

    Lista->vetor[Lista->numElem] = c1;
    Lista->numElem = Lista->numElem+1;

}

void inserirPosiçao(Lista* lista, int pos, Cliente c1){

    int i;
    if(pos >= Lista->numElem){

        adicionarFinal(lista, c1);

    }

    else{

        for(i = Lista->numElem; i > pos; i--){

            Lista->vetor[i] = Lista->vetor[i-1];

        }
        Lista->vetor[pos] = c1;
        Lista->numElem = Lista->numElem + 1;


    }

void iserirInicio(Lista* lista, int pos, Cliente c1){

    inserirPosiçao(lista,0,c1);

}

Lista * buscarIndice (Lista lista, Cliente c1) {

    Int i;
    Para (i = 0; i <= Lista-> numElem; i -) {

        If (Lista-> vetor [i] == c1) {

            Return i;

        }
        outro
            Printf ("O cliente não existe");

    }

}

Lista * removedElemento (Lista lista, int pos, Cliente c1) {

    Int i;
    Int aux;
    If (pos == Lista-> vetor [Lista-> numElem]) {
      Lista-> vetor [Lista-> numElem] = NULL;

    }
    Aux = Lista-> vetor [pos];
    Lista-> vetor [pos] = NULL;
        Para (i = Lista-> numElem; i> pos; i -) {

        Lista-> vetor [i] = Lista-> vetor [i-1];

    }

    Lista-> numElem = Lista-> numElem - 1;

    Return & aux;
}

Void deletarLista (Lista lista) {

    Int i;
    Para (i = 0; i <Lista-> numElem; i ++) {

        Lista-> vetor [i] = nulo;

    }

}


}
Int main () {

    Lista lista;
    CriarLista (& lista);
    Adicionar (& lista, c1)


}
